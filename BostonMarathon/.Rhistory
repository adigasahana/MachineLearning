# Completion_time_plot <- ggplot(data = )
# ?filter
Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "#3366FF")
Age_Gender_plot
# str(df$Official.Time)
# head(Completion_time_in_sec)
# is.na(Completion_time_in_sec)
# head(df_Age_Gender_dist)
# head(Completion_time_in_sec)
# Completion_time <- df_Age_Gender_dist %>% filter(df_Age_Gender_dist, df_Age_Gender_dist$Sex =='M') %>% summarise(Count = n())
# head(Completion_time)
# Completion_time_plot <- ggplot(data = )
# ?filter
Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue")
Age_Gender_plot
# str(df$Official.Time)
# head(Completion_time_in_sec)
# is.na(Completion_time_in_sec)
# head(df_Age_Gender_dist)
# head(Completion_time_in_sec)
# Completion_time <- df_Age_Gender_dist %>% filter(df_Age_Gender_dist, df_Age_Gender_dist$Sex =='M') %>% summarise(Count = n())
# head(Completion_time)
# Completion_time_plot <- ggplot(data = )
# ?filter
Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red")
Age_Gender_plot
Age_Gender_plot + ggtitle("Distribution of Participants Age over Gender") + xlab("Gender") + ylab("Age")
ggplot(df) + geom_bar(Age, fill = "blue")
ggplot(df) + geom_bar(df$Age, fill = "blue")
ggplot(df) + geom_bar(aes(df$Age, fill = "blue"))
ggplot(df) + geom_bar(aes(df$Age, fill = "red"))
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants")
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
head(df)
?split
count(df$Name)
df_names <- df %>% group_by(df$Name) %>% summarise(Count = n())
df_names
df_names$Count > 1
df[df_names$Count > 1]
df[df_names] <- df %>% group_by(df$Name) %>% summarise(Count = n())
df_names$Count == 3
df[15]
df[15,]
city_rep <- df$Country == "India"
city_rep
city_rep <- df %>% group_by(Country) %>% summarise(count(n))
city_rep <- df %>% group_by(Country) %>% summarise(count = n())
city_rep
city_rep <- df %>% group_by(Country, Age) %>% summarise(count = n())
city_rep
Country_partc <- ggplot(df, aes(df$Country, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red")
Country_partc + ggtitle("Distribution of Participants from different Countries and Age") + xlab("Country") + ylab("Age")
city_rep <- df %>% group_by(Country, mean(Age)) %>% summarise(count = n())
city_rep
country_partc + order(Country_partc, decreasing = FALSE)
country_partc <- country_partc + order(Country_partc, decreasing = FALSE)
Country_partc <- Country_partc + order(Country_partc, decreasing = FALSE)
Country_partc <- ggplot(df, aes(df$Country, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red") + order(decreasing = FALSE)
Country_partc + ggtitle("Distribution of Participants from different Countries and Age") + xlab("Country") + ylab("Age")
Country_partc
Country_partc(sort(Country_partc, decreasing = TRUE)[1:20], type = "h")
Country_partc <- df %>% select(Country, Age, M.F) %>% sort(Country_partc, decreasing = FALSE)
Country_partc
Country_partc <- NULL
Country_partc <- df %>% select(Country, Age, M.F) %>% sort(Country_partc, decreasing = FALSE)
count(df$Country)
Country_partc <- df %>% select(Country, Age, M.F) %>% summarise(count = n())
Country_partc
Country_partc <- df %>% select(Country, Age, M.F) %>% summarise(count = n(Country))
Country_partc <- df %>% select(Country, Age, M.F) %>% summarise(count(Country, sort = TRUE))
head(df)
str(df)
Country <- as.factor(df$Country)
str(df)
df$Country <- as.factor(df$Country)
str(df)
count(df$Country)
Country_partc <- df %>% select(Country, Age, M.F) %>% summarise(count(Country, sort = TRUE))
Country_partc <- df %>% select(Country, Age, M.F)
Country_partc
Country_partc <- df %>% select(Country, Age, M.F) %>% head(20)
Country_partc
Country_partc <- df %>% select(Country, Age) %>% summarise(Country)
Country_partc <- df %>% select(Country, Age) %>% summarise(df$Country)
?summarise
Country_partc <- df %>% select(Country, Age) %>% summarise(first(df$Country, order_by = count(df$Country)))
Country_partc <- ggplot(df, aes(df$Country)) + geom_bar(fill = "pink", colour = "blue", outlier.color = "red")
Country_partc <- ggplot(df, aes(df$Country)) + geom_bar(fill = "pink")
Country_partc + ggtitle("Distribution of Participants from different Countries") + xlab("Country") + ylab("Count")
Country_partc <- ggplot(df, aes(df$Country)) + geom_bar(fill = "blue")
Country_partc + ggtitle("Distribution of Participants from different Countries") + xlab("Country") + ylab("Count")
head(Country_partc)
?geom_bar
Country_partc <- NULL
?cut
levels(df$Country)
levels(Country_partc)
Country_partc <- count(df$Country)
df_Age_Gender_dist
Country_partc<- df %>% group_by(Country, M.F) %>% summarise(Count = n())
Country_partc
Country_partc<- df %>% group_by(Country, M.F) %>% summarise(Count = n()) %>% sort(Country_partc, decreasing = FALSE)
Country_partc<- df %>% group_by(Country, M.F) %>% sort(Country_partc, decreasing = FALSE) %>% summarise(Count = n())
Country_partc<- df %>% group_by(Country, M.F) %>% summarise(Count = n())
Country_partc<- df %>% group_by(Country, M.F, Age)
Country_partc
Country_partc<- df %>% select(Country, M.F, Age)
Country_partc
Country_partc<- cut(Country_partc$Country, breaks = hist(Country_partc$Country)$breaks
Country_partc
Country_partc<- count(Country_partc$Country, sort = TRUE)
Country_partc$Country <- as.numeric(Country_partc$Country)
Country_partc<- count(Country_partc$Country, sort = TRUE)
Country_partc<- df %>% select(Country, M.F, Age) %>% summarise(n = n()) %>% arrange(desc(n))
Country_partc
Country_partc<- df %>% select(Country, M.F, Age) %>% arrange(desc(n))
Country_partc <- ggplot(df, aes(df$Country)) + geom_bar(fill = "blue")
Country_partc + ggtitle("Distribution of Participants from different Countries") + xlab("Country") + ylab("Count")
ggplot(df) + geom_boxplot(x = df$M.F, y = df$Age)
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
library(dplyr)
library(readr) #to read csv files
library(plotly)
library(countrycode)
library(hms)
#including all the required libraries
library(tidyverse)
df1_2015 <- read.csv("BM_results_2015.csv", stringsAsFactors = FALSE)
df2_2016 <- read.csv("BM_results_2016.csv", stringsAsFactors = FALSE)
df3_2017 <- read.csv("BM_results_2017.csv", stringsAsFactors = FALSE)
str(df1_2015)
str(df2_2016)
str(df3_2017)
df1_2015 <- df1_2015 %>% select(-one_of(c("X","X.1")))
head(df1_2015)
df2_2016 <- df2_2016 %>% select(-one_of("X"))
head(df2_2016)
names(df2_2016)
names(df1_2015)
df3_2017 <- df3_2017 %>% select(-one_of(c("X", "X.1")))
head(df3_2017)
names(df3_2017)
# since we have same names for all 2 dfs, we can combine 3 into 1 single dataframe using rbind
df <- rbind(df1_2015, df2_2016, df3_2017)
#get the dimension of the new dataframe using dim() and validate the total no of rows
dim(df)
# understand the structure of the dataframe
str(df)
#visualize the total number of participants for each year
#selecting only the gender column for visualization, renames column M.F to Gender
gender_dist <- df %>% select(M.F)
g <- ggplot(gender_dist, aes(x = M.F, fill = M.F)) + geom_bar()
g <- g + labs(x = "Gender", y = "Particpants Count", title = "Gender Distribution", subtitle = "Distribution of Male and Female particpants from 2015-2017") + guides(fill = FALSE)
g
min(df$Age)
max(df$Age)
df$Aged_between <- cut(df$Age, seq(10,90,10))
count(df, Aged_between)
df_Age_dist <- ggplot(df, aes(x = Aged_between, fill = "red")) + geom_bar() + guides(fill = FALSE)
df_Age_dist <- df_Age_dist + ggtitle("Distribution of Participants by Age") + labs(x = "Age Category", y = "Participants Count")
df_Age_dist
df_Age_Gender_dist <- df %>% group_by(Aged_between, M.F)
count(df_Age_Gender_dist)
df_Age_Gender_dist <- df %>% group_by(Aged_between, M.F) %>% summarise(Count = n())
df_Age_Gender_dist
str(df_Age_Gender_dist)
df_Age_Gender_dist$Pct <- sapply(df_Age_Gender_dist$Count, function(x)  100 * x/sum(df_Age_Gender_dist$Count))
df_Age_Gender_dist$Sex <- as.factor(df_Age_Gender_dist$M.F)
head(df_Age_Gender_dist)
Age_Gender_dist_plot <- ggplot(data = df_Age_Gender_dist, aes(x = Aged_between, y = Pct, fill = Sex)) + geom_bar(stat = "identity", position="dodge") + ggtitle("Percentage of participants per Age Group & Gender") + xlab("Age Category and Gender") + ylab("Percentage") + guides(fill = FALSE)
Age_Gender_dist_plot
df_Age_dist
Age_Gender_dist_plot
Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red")
Age_Gender_plot + ggtitle("Distribution of Participants Age over Gender") + xlab("Gender") + ylab("Age")
ggplot(df) + geom_boxplot(x = df$M.F, y = df$Age)
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE) + psition = "jitter"
ggplot(df) + geom_bar(aes(df$Age, fill = "red")  + psition = "jitter") + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
Age_Gender_dist_plot
#Plot the distribution of % participants base don age & gender
Age_Gender_dist_plot <- ggplot(data = df_Age_Gender_dist, aes(x = Aged_between, y = Pct, fill = Sex)) + geom_bar(stat = "identity", position="dodge") + ggtitle("Percentage of participants per Age Group & Gender") + xlab("Age Category and Gender") + ylab("Percentage") + guides(fill = FALSE) + coord_flip()
Age_Gender_dist_plot
df_Age_dist
df_Age_dist <- ggplot(df, aes(x = Aged_between, fill = "red")) + geom_hist() + guides(fill = FALSE)
df_Age_dist <- df_Age_dist + ggtitle("Distribution of Participants by Age") + labs(x = "Age Category", y = "Participants Count")
df_Age_dist
#visualize particants by age categories
df_Age_dist <- ggplot(df, aes(x = Aged_between, fill = "red")) + geom_histogram() + guides(fill = FALSE)
df_Age_dist <- df_Age_dist + ggtitle("Distribution of Participants by Age") + labs(x = "Age Category", y = "Participants Count")
df_Age_dist
Age_Gender_dist_plot
df_Age_dist <- ggplot(df, aes(x = Aged_between, fill = "red")) + geom_bar() + guides(fill = FALSE)
df_Age_dist <- df_Age_dist + ggtitle("Distribution of Participants by Age") + labs(x = "Age Category", y = "Participants Count")
df_Age_dist
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
?geom_histogram
ggplot(df) + geom_histogram(x = df$M.F, y = df$Age, binwidth = 10)
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
#ANalyse count of participants over different age group
Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red")
#ANalyse count of participants over different age group
Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red")
Age_Gender_plot + ggtitle("Distribution of Participants Age over Gender") + xlab("Gender") + ylab("Age")
ggplot(df, aes(x = df$M.F, y = df$Age)) + geom_histogram( binwidth = 10)
ggplot(df, aes(x = df$M.F, y = df$Age)) + geom_freqpoly( binwidth = 10)
ggplot(df, aes(x = df$M.F, y = df$Age)) + geom_bar()
ggplot(df) + geom_bar(x = df$M.F, y = df$Age)
ggplot(df) + geom_boxplot(x = df$M.F, y = df$Age)
ggplot(df) + geom_bar(x = df$M.F, y = df$Age)
# #Plot the distribution of % participants base don age & gender
# Age_Gender_dist_plot <- ggplot(data = df_Age_Gender_dist, aes(x = Aged_between, y = Pct, fill = Sex)) + geom_bar(stat = "identity", position="dodge") + ggtitle("Percentage of participants per Age Group & Gender") + xlab("Age Category and Gender") + ylab("Percentage") + guides(fill = FALSE) + coord_flip()
# Age_Gender_dist_plot
# #ANalyse count of participants over different age group
# Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red")
# Age_Gender_plot + ggtitle("Distribution of Participants Age over Gender") + xlab("Gender") + ylab("Age")
# ggplot(df) + geom_bar(x = df$M.F, y = df$Age)
# ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
#Plot the distribution of % participants base don age & gender
Age_Gender_dist_plot <- ggplot(data = df_Age_Gender_dist, aes(x = Aged_between, y = Pct, fill = Sex)) + geom_bar(stat = "identity", position="dodge") + ggtitle("Percentage of participants per Age Group & Gender") + xlab("Age Category and Gender") + ylab("Percentage") + guides(fill = FALSE)
Age_Gender_dist_plot
#ANalyse count of participants over different age group
Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red")
ggplot(df) + geom_boxplot(x = df$M.F, y = df$Age)
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
ggplot(df) + geom_boxplot(x = df$M.F, y = df$Age)
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
#map country
america <- map_data("usa")
install.packages("purr")
install.packages("purrr")
library(purrr)
#map country
america <- map_data("usa")
america
ggplot(america, aes(long, lat, group = group))
geom_polygon(fill = "white", color = "black")
ggplot(america, aes(long, lat, group = group)) + geom_polygon(fill = "white", color = "black")
#map country
america$city <- df$City %>% filter(df$Country == "USA")
#map country
america$city <- df$City %>% filter(df$Country = "USA")
?filter
#map country
america$city <- df$City %>% filter(df, df$Country == "USA")
#map country
america$city <- filter(df, df$Country == "USA")
america
america$city <- filter(df, df$Age == 40)
america
df_city <- filter(df, df$Country == "USA")
df_city
dim(df_city)
#map country
head(df) %>% filter(df, df$M.F == "M")
df_Age_Gender_dist <- df %>% group_by(Country) %>% summarise(Count = n())
df_Age_Gender_dist
?sort
sort(df_Age_Gender_dist, decreasing = FALSE)
country_count <- df %>% group_by(Country) %>% summarise(Count = n())
country_count <- df %>% group_by(Country) %>% summarise(Count = n()) %>% sort.default(country_count, decreasing = FALSE)
sort(country_count, decreasing = TRUE)
order(country_count)
str(country_count)
country_count <- as.factor(country_count)
order(country_count)
str(country_count)
country_count <- sapply(country_count, function(x) rank(x, ties.method = M)
country_count
country_count <- sort(table(country_count),decreasing=T)
country_count
df_city <- filter(df, df$Country == "USA")
sort(df_city)
?ggsave
#map country
x <- c(19,25,59)
sort(x)
sort(x, decreasing = FALSE)
sort(x)
#map country
x <- c(59,25,36)
sort(x)
sort(x, decreasing = FALSE)
install.packages("RCOlorBrewer")
install.packages("RColorBrewer")
library(RColorBrewer)
freq <- colSums(as.matrix(df))
freq <- colSums(as.matrix(df$Country))
freq <- colSums(as.matrix(df$Age))
head(freq)
dim(freq)
str(freq)
m <- as.matrix(df$Country)
m
dim(m)
m <- as.matrix(df)
dim(m)
write.csv(m, file = "df_Matrix.csv")
freq <- colSums(as.matrix(m$Country))
freq <- colSums(as.matrix(m))
freq <- colSums(as.matrix(Country))
dtm <- DocumentTermMatrix(m)
?DocumentTermMatrix
#countries wordcloud
Country_count <- df %>% group_by(Country) %>% summarise(Count = n())
source('C:/Sahana/R/BostonMarathonAnalysis/MarathonAnalysis.R', echo=TRUE)
#including all the required libraries
library(tidyverse)
#including all the required libraries
install.packages("tidyverse")
#including all the required libraries
library(tidyverse)
source('C:/Sahana/R/BostonMarathonAnalysis/MarathonAnalysis.R', echo=TRUE)
Age_Gender_dist_plot
ggplot(df) + geom_boxplot(x = df$M.F, y = df$Age)
#ANalyse count of participants over different age group
Age_Gender_plot <- ggplot(df, aes(df$M.F, y = df$Age)) + geom_boxplot(fill = "pink", colour = "blue", outlier.color = "red")
Age_Gender_plot + ggtitle("Distribution of Participants Age over Gender") + xlab("Gender") + ylab("Age")
ggplot(df) + geom_bar(aes(df$Age, fill = "red")) + ggtitle("Distribution of Participants per Age group") + xlab("Age") + ylab("Count of Participants") + guides(fill = FALSE)
#countries wordcloud
Country_count <- df %>% group_by() %>% summarise(Count = n())
Country_count
#countries wordcloud
Country_count <- df %>% group_by(df$Country) %>% summarise(Count = n())
Country_count
str(Country_count)
Country_count[order(Count),]
#countries wordcloud
Country_count <- df %>% select(Age, Country, Official.Time) %>% group_by(df$Country) %>% summarise(Count = n())
str(Country_count)
head(Country_count)
#countries wordcloud
Country_count <- filter(df, df$Country)) %>% summarise(Count = n())
#countries wordcloud
Country_count <- filter(df, df$Country) %>% summarise(Count = n())
#countries wordcloud
Country_count <- filter(df, df$Country) %>% group_by(df$Country) %>% summarise(Count = n())
#countries wordcloud
Country_count <- df %>% group_by(df$Country) %>% summarise(Count = n())
str(Country_count)
dim(Country_count)
Country_count <- df[order(df$Country),]
Country_count
Country_count <- Country_count %>% summarise(count=n())
Country_count
Country_count <- Country_count %>% group_by(Country) %>% summarise(count=n())
Country_count <- Country_count %>% group_by(Country_Count$Country) %>% summarise(count=n())
Country_count <- Country_count %>% group_by(Country_count$Country) %>% summarise(count=n())
Country_count <- df[order(df$Country),count(df$Country)]
barplot(df[order(df$Country, decreasing = TRUE)])
barplot(df[Country_count(Country_count, decreasing = TRUE)])
#countries wordcloud
Country_count <- df %>% group_by(df$Country) %>% summarise(Count = n())
barplot(df[Country_count(Country_count, decreasing = TRUE)])
barplot(Country_count[order(Country_count, decreasing = TRUE)])
?reorder
df_c <- df
str(df_c)
transform(df_c, group = reorder(df$Country, count()))
#countries wordcloud
Country_count <- df %>% group_by(df$M.F, df$Age, df$Country)%>% summarize(count = n())%>% filter(count>100)
Country_count
#countries wordcloud
Country_count <- df %>% group_by(df$Country)%>% summarize(count = n())%>% filter(count>100)
Country_count
ggplot(Country_count, aes(x = Country_count$Country))
#countries wordcloud
Country_count <- df %>% group_by(df$Country)%>% summarize(count = n())%>% filter(count>100) %>% ggplot(Country_count, aes(df$Country))
C_100 <- Country_count
C_100
#countries wordcloud
Country_count <- df %>% group_by(Country = df$Country)%>% summarize(count = n())%>% filter(count>100) %>% ggplot(Country_count, aes(df$Country))
#countries wordcloud
Country_count <- df %>% group_by(Country = df$Country)%>% summarize(count = n())%>% filter(count>100)
C_100 <- Country_count
C_100
ggplot(C_100, aes(Country, count))
ggplot(C_100, aes(Country, count)) + geom_bar()
ggplot(C_100, aes(Country)) + geom_bar()
ggplot(C_100, aes(c-100$Country, fill = country)) + geom_bar()
ggplot(C_100, aes(C_100$Country, fill = country)) + geom_bar()
ggplot(C_100, aes(C_100$Country)) + geom_bar()
ggplot(C_100, aes(x = C_100$Country, y = C_100$count)) + geom_bar()
ggplot(C_100, aes(x = C_100$Country)) + geom_bar()
#SD
ot_sd <- df %>% group_by(df$Country) %>% summarize(sd = sd(df$Official.Time)) %>% arrange(desc(sd))
ot_sd
#SD
ot_sd <- df %>% group_by(df$Country) %>% summarize(sd = sd(df$Country)) %>% arrange(desc(sd))
ot_sd
#SD
ot_sd <- df %>% group_by(df$Age) %>% summarize(sd = sd(df$Age)) %>% arrange(desc(sd))
ot_sd
#countries wordcloud
CountryNames <- df$Country
CountryNames <- countrycode(CountryNames, "iso2c", "country.name")
Country
CountryNames
df$
df$Country
#countries wordcloud
CountryNames <- df$Country
CountryNames
write.table(CountryNames, "Country.txt")
library(tm)
library(wordcloud)
library(RColorBrewer)
#wordcloud analysis - load data as Corpus
docs <- Corpus(VectorSource(CountryNames))
docs
head(docs)
inspect(docs)
#use transformations to remove puctuations, numbers, space etc
docs <- tm_map(docs,removeNumbers)
docs <- tm_map(docs,removePunctuation)
docs <- tm_map(docs, stripWhitespace)
#build TDM
tdm <- TermDocumentMatrix(docs)
head(tdm)
Country_count <- as.matrix(tdm)
head(Country_count)
count <- sort(rowSums(Country_count), decreasing = TRUE)
C_data <- data.frame(word = names(count), freq = count)
head(C_data, 10)
C_data <- data.frame(Country = names(count), count = count)
Countrylist <- data.frame(Country = names(count), count = count)
head(C_data, 10)
head(Countrylist, 10)
C_data <- NULL
wordcloud(Countrylist$Country, Countrylist$count,max.words = 100, random.order = FALSE,colors = brewer.pal(8, "Dark2"))
#countries wordcloud - load df$Country to CountryNames and save it in a text file
CountryNames <- df$Country %>% filter(df$Country != "USA")
#countries wordcloud - load df$Country to CountryNames and save it in a text file
CountryNames <- df %>% select(df$Country) %>% filter(df$Country != "USA")
#countries wordcloud - load df$Country to CountryNames and save it in a text file
CountryNames <- df %>% select(df$Country) %>% filter(df$Country != 'USA')
#countries wordcloud - load df$Country to CountryNames and save it in a text file
CountryNames <- df$COuntry %>%  filter(df$Country != 'USA')
#countries wordcloud - load df$Country to CountryNames and save it in a text file
CountryNames <- df%>%  filter(df$Country != 'USA')
CountryNames
#countries wordcloud - load df$Country to CountryNames and save it in a text file
CountryNames <- df%>%  filter(df$Country != 'USA') %>% select(df$Country)
CountryNames <- CountryNames$Country
CountryNames
write.table(CountryNames, "CountryExceptUSA.txt")
#wordcloud analysis - load data as Corpus
docs <- Corpus(VectorSource(CountryNames))
docs
#use transformations to remove puctuations, numbers, space etc
docs <- tm_map(docs,removeNumbers)
docs <- tm_map(docs,removePunctuation)
docs <- tm_map(docs, stripWhitespace)
#build TDM
tdm <- TermDocumentMatrix(docs)
head(tdm)
Country_count <- as.matrix(tdm)
count <- sort(rowSums(Country_count), decreasing = TRUE)
Countrylist <- data.frame(Country = names(count), count = count)
head(Countrylist, 10)
wordcloud(Countrylist$Country, Countrylist$count,max.words = 100, random.order = FALSE,colors = brewer.pal(8, "Dark2"))
#countries wordcloud - load df$Country to CountryNames and save it in a text file
#CountryNames <- df$Country
#CounryNames <- df$Country %>% filter(df$Country != 'USA) %>% select(df$Country)
CountryNames <- df%>%  filter(df$Country != 'USA' & df$Country != 'CAN') %>% select(df$Country)
#countries wordcloud - load df$Country to CountryNames and save it in a text file
#CountryNames <- df$Country
#CounryNames <- df$Country %>% filter(df$Country != 'USA) %>% select(df$Country)
CountryNames <- df%>%  filter((df$Country != 'USA') & (df$Country != 'CAN')) %>% select(df$Country)
#countries wordcloud - load df$Country to CountryNames and save it in a text file
#CountryNames <- df$Country
#CounryNames <- df$Country %>% filter(df$Country != 'USA)
CountryNames <- df%>%  filter(df$Country != 'USA' & df$Country != 'CAN')
CountryNames <- CountryNames$Country
CountryNames
write.table(CountryNames, "CountryExceptUSA-CAN.txt")
#wordcloud analysis - load data as Corpus
docs <- Corpus(VectorSource(CountryNames))
#use transformations to remove puctuations, numbers, space etc
docs <- tm_map(docs,removeNumbers)
docs <- tm_map(docs,removePunctuation)
docs <- tm_map(docs, stripWhitespace)
#build TDM
tdm <- TermDocumentMatrix(docs)
Country_count <- as.matrix(tdm)
count <- sort(rowSums(Country_count), decreasing = TRUE)
Countrylist <- data.frame(Country = names(count), count = count)
head(Countrylist, 10)
wordcloud(Countrylist$Country, Countrylist$count,max.words = 100, random.order = FALSE,colors = brewer.pal(8, "Dark2"))
#countries wordcloud - load df$Country to CountryNames and save it in a text file
#CountryNames <- df$Country
#CounryNames <- df$Country %>% filter(df$Country != 'USA)
CountryNames <- df%>%  filter(df$Country != 'USA' & df$Country != 'CAN' & df$Country != 'GBR')
CountryNames <- CountryNames$Country
write.table(CountryNames, "CountryExceptUSA-CAN-GBR.txt")
#wordcloud analysis - load data as Corpus
docs <- Corpus(VectorSource(CountryNames))
#use transformations to remove puctuations, numbers, space etc
docs <- tm_map(docs,removeNumbers)
docs <- tm_map(docs,removePunctuation)
docs <- tm_map(docs, stripWhitespace)
#build TDM
tdm <- TermDocumentMatrix(docs)
Country_count <- as.matrix(tdm)
count <- sort(rowSums(Country_count), decreasing = TRUE)
Countrylist <- data.frame(Country = names(count), count = count)
head(Countrylist, 10)
wordcloud(Countrylist$Country, Countrylist$count,max.words = 100, random.order = FALSE,colors = brewer.pal(8, "Dark2"))
wordcloud(Countrylist$Country, Countrylist$count,max.words = 50, random.order = FALSE,colors = brewer.pal(8, "Dark2"))
wordcloud(Countrylist$Country, Countrylist$count,max.words = 500, random.order = FALSE,colors = brewer.pal(8, "Dark2"))
